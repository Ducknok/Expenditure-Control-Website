{
  "version": 3,
  "sources": ["../../../../../node_modules/ngx-mask/fesm2020/ngx-mask.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, inject, Injectable, ElementRef, Renderer2, makeEnvironmentProviders, Directive, Input, Output, HostListener, Pipe } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nconst NGX_MASK_CONFIG = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: ['.', ','],\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // eslint-disable-next-line @typescript-eslint/quotes\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  leadZeroDateTime: false,\n  triggerOnMaskChange: false,\n  maskFilled: new EventEmitter(),\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d')\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*'\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]')\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]')\n    },\n    U: {\n      pattern: new RegExp('[A-Z]')\n    },\n    L: {\n      pattern: new RegExp('[a-z]')\n    },\n    d: {\n      pattern: new RegExp('\\\\d')\n    },\n    m: {\n      pattern: new RegExp('\\\\d')\n    },\n    M: {\n      pattern: new RegExp('\\\\d')\n    },\n    H: {\n      pattern: new RegExp('\\\\d')\n    },\n    h: {\n      pattern: new RegExp('\\\\d')\n    },\n    s: {\n      pattern: new RegExp('\\\\d')\n    }\n  }\n};\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nconst withoutValidation = ['percent', 'Hh', 's0', 'm0', 'separator', 'd0/M0/0000', 'd0/M0', 'd0', 'M0'];\nclass NgxMaskApplierService {\n  constructor() {\n    this._config = inject(NGX_MASK_CONFIG);\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.hiddenInput = this._config.hiddenInput;\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.specialCharacters = this._config.specialCharacters;\n    this.patterns = this._config.patterns;\n    this.prefix = this._config.prefix;\n    this.suffix = this._config.suffix;\n    this.thousandSeparator = this._config.thousandSeparator;\n    this.decimalMarker = this._config.decimalMarker;\n    this.showMaskTyped = this._config.showMaskTyped;\n    this.placeHolderCharacter = this._config.placeHolderCharacter;\n    this.validation = this._config.validation;\n    this.separatorLimit = this._config.separatorLimit;\n    this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n    this.leadZeroDateTime = this._config.leadZeroDateTime;\n    this._shift = new Set();\n    this.maskExpression = '';\n    this.actualValue = '';\n    this.shownMaskExpression = '';\n    this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n      let x = [];\n      let decimalChar = '';\n      if (Array.isArray(decimalChars)) {\n        const regExp = new RegExp(decimalChars.map(v => '[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v).join('|'));\n        x = str.split(regExp);\n        decimalChar = str.match(regExp)?.[0] ?? '';\n      } else {\n        x = str.split(decimalChars);\n        decimalChar = decimalChars;\n      }\n      const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n      let res = x[0] ?? '';\n      const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n      if (separatorLimit && +separatorLimit) {\n        if (res[0] === '-') {\n          res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n        } else {\n          res = res.slice(0, separatorLimit.length);\n        }\n      }\n      const rgx = /(\\d+)(\\d{3})/;\n      while (thousandSeparatorChar && rgx.test(res)) {\n        res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n      }\n      if (precision === undefined) {\n        return res + decimals;\n      } else if (precision === 0) {\n        return res;\n      }\n      return res + decimals.substring(0, precision + 1);\n    };\n    this.percentage = str => {\n      return Number(str) >= 0 && Number(str) <= 100;\n    };\n    this.getPrecision = maskExpression => {\n      const x = maskExpression.split('.');\n      if (x.length > 1) {\n        return Number(x[x.length - 1]);\n      }\n      return Infinity;\n    };\n    this.checkAndRemoveSuffix = inputValue => {\n      for (let i = this.suffix?.length - 1; i >= 0; i--) {\n        const substr = this.suffix.substring(i, this.suffix?.length);\n        if (inputValue.includes(substr) && i !== this.suffix?.length - 1 && (i - 1 < 0 || !inputValue.includes(this.suffix.substring(i - 1, this.suffix?.length)))) {\n          return inputValue.replace(substr, '');\n        }\n      }\n      return inputValue;\n    };\n    this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n      if (precision < Infinity) {\n        // TODO need think about decimalMarker\n        if (Array.isArray(decimalMarker)) {\n          const marker = decimalMarker.find(dm => dm !== this.thousandSeparator);\n          // eslint-disable-next-line no-param-reassign\n          decimalMarker = marker ? marker : decimalMarker[0];\n        }\n        const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n        const precisionMatch = inputValue.match(precisionRegEx);\n        const precisionMatchLength = (precisionMatch && precisionMatch[0]?.length) ?? 0;\n        if (precisionMatchLength - 1 > precision) {\n          const diff = precisionMatchLength - 1 - precision;\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.substring(0, inputValue.length - diff);\n        }\n        if (precision === 0 && this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.substring(0, inputValue.length - 1);\n        }\n      }\n      return inputValue;\n    };\n  }\n  applyMaskWithPattern(inputValue, maskAndPattern) {\n    const [mask, customPattern] = maskAndPattern;\n    this.customPattern = customPattern;\n    return this.applyMask(inputValue, mask);\n  }\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    if (!maskExpression || typeof inputValue !== 'string') {\n      return '';\n    }\n    let cursor = 0;\n    let result = '';\n    let multi = false;\n    let backspaceShift = false;\n    let shift = 1;\n    let stepBack = false;\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n    }\n    if (!!this.suffix && inputValue?.length > 0) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.checkAndRemoveSuffix(inputValue);\n    }\n    const inputArray = inputValue.toString().split('');\n    if (maskExpression === 'IP') {\n      const valuesIP = inputValue.split('.');\n      this.ipError = this._validIP(valuesIP);\n      // eslint-disable-next-line no-param-reassign\n      maskExpression = '099.099.099.099';\n    }\n    const arr = [];\n    for (let i = 0; i < inputValue.length; i++) {\n      if (inputValue[i]?.match('\\\\d')) {\n        arr.push(inputValue[i] ?? '');\n      }\n    }\n    if (maskExpression === 'CPF_CNPJ') {\n      this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n      if (arr.length > 11) {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '00.000.000/0000-00';\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '000.000.000-00';\n      }\n    }\n    if (maskExpression.startsWith('percent')) {\n      if (inputValue.match('[a-z]|[A-Z]') ||\n      // eslint-disable-next-line no-useless-escape\n      inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n        const precision = this.getPrecision(maskExpression);\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      }\n      if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n        const base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n        // eslint-disable-next-line no-param-reassign\n        inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n      }\n      if (this.percentage(inputValue)) {\n        result = inputValue;\n      } else {\n        result = inputValue.substring(0, inputValue.length - 1);\n      }\n    } else if (maskExpression.startsWith('separator')) {\n      if (inputValue.match('[wа-яА-Я]') || inputValue.match('[ЁёА-я]') || inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\]:\";<>.?/]/) || inputValue.match('[^A-Za-z0-9,]')) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n      }\n      // eslint-disable-next-line no-param-reassign\n      inputValue = inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.thousandSeparator && !this._compareOrIncludes(inputValue[1], this.decimalMarker, this.thousandSeparator) && !backspaced ? inputValue.slice(0, inputValue.length - 1) : inputValue;\n      if (backspaced) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator) ? inputValue.slice(0, inputValue.length - 1) : inputValue;\n      }\n      // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n      //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n      const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n      let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, '');\n      //.replace(decimalMarkerEscaped, '');\n      if (Array.isArray(this.decimalMarker)) {\n        for (const marker of this.decimalMarker) {\n          invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), '');\n        }\n      } else {\n        invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n      }\n      const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n      if (inputValue.match(invalidCharRegexp) || inputValue.length === 1 && this._compareOrIncludes(inputValue, this.decimalMarker, this.thousandSeparator)) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      }\n      const precision = this.getPrecision(maskExpression);\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n      result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n      const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n      const shiftStep = result.length - inputValue.length;\n      if (shiftStep > 0 && result[position] !== ',') {\n        backspaceShift = true;\n        let _shift = 0;\n        do {\n          this._shift.add(position + _shift);\n          _shift++;\n        } while (_shift < shiftStep);\n      } else if (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3) || !(result.indexOf('.') >= position && position > 3) && shiftStep <= 0) {\n        this._shift.clear();\n        backspaceShift = true;\n        shift = shiftStep;\n        // eslint-disable-next-line no-param-reassign\n        position += shiftStep;\n        this._shift.add(position);\n      } else {\n        this._shift.clear();\n      }\n    } else {\n      for (\n      // eslint-disable-next-line\n      let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i] ?? '') {\n        if (cursor === maskExpression.length) {\n          break;\n        }\n        if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? '') && maskExpression[cursor + 1] === '?') {\n          result += inputSymbol;\n          cursor += 2;\n        } else if (maskExpression[cursor + 1] === '*' && multi && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? '')) {\n          result += inputSymbol;\n          cursor += 3;\n          multi = false;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? '') && maskExpression[cursor + 1] === '*') {\n          result += inputSymbol;\n          multi = true;\n        } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? '')) {\n          result += inputSymbol;\n          cursor += 3;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? '')) {\n          if (maskExpression[cursor] === 'H') {\n            if (Number(inputSymbol) > 2) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'h') {\n            if (result === '2' && Number(inputSymbol) > 3) {\n              cursor += 1;\n              i--;\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'm') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 's') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          const daysCount = 31;\n          if (maskExpression[cursor] === 'd') {\n            const maskStartWithMonth = maskExpression.slice(0, 2) === 'M0';\n            const startWithMonthInput = maskExpression.slice(0, 2) === 'M0' && (inputValue[cursor - 2] === '/' || inputValue[cursor - 2] === '.' || inputValue[cursor - 2] === '-');\n            if (Number(inputSymbol) > 3 && this.leadZeroDateTime || !maskStartWithMonth && (Number(inputValue.slice(cursor, cursor + 2)) > daysCount || Number(inputValue.slice(cursor - 1, cursor + 1)) > daysCount || inputValue[cursor + 1] === '/' || inputValue[cursor + 1] === '-') || (startWithMonthInput ? Number(inputValue.slice(cursor - 1, cursor + 1)) > daysCount || inputValue[cursor] !== '/' && (inputValue[cursor + 2] === '.' || inputValue[cursor + 2] === '/' || inputValue[cursor + 2] === '-') || inputValue[cursor] === '.' || inputValue[cursor] === '/' || inputValue[cursor] === '-' : Number(inputValue.slice(cursor, cursor + 2)) > daysCount || inputValue[cursor + 1] === '/' || inputValue[cursor + 1] === '-' || inputValue[cursor + 1] === '.')) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'M') {\n            const monthsCount = 12;\n            // mask without day\n            const withoutDays = cursor === 0 && (Number(inputSymbol) > 2 || Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/');\n            // day<10 && month<12 for input\n            const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') && (inputValue[cursor - 2] === '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount && inputValue[cursor] !== '/' || inputValue[cursor] === '/' || inputValue[cursor] === '-' || inputValue[cursor - 3] === '/' && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount && inputValue[cursor - 1] !== '/' || inputValue[cursor - 1] === '/' || inputValue[cursor - 1] === '-');\n            //  month<12 && day<10 for input\n            const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && (inputValue[cursor - 1] === '/' || inputValue[cursor - 1] === '-') && (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/' || inputValue[cursor + 1] === '-');\n            // cursor === 5 && without days\n            const day2monthInputDot = Number(inputValue.slice(cursor, cursor + 2)) > monthsCount && cursor === 5 || inputValue[cursor + 1] === '.' || inputValue[cursor + 1] === '-' || inputValue[cursor + 1] === '/';\n            // day<10 && month<12 for paste whole data\n            const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && !inputValue.slice(cursor - 2, cursor).includes('/') && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount;\n            // 10<day<31 && month<12 for paste whole data\n            const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] !== '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n            if (Number(inputSymbol) > 1 && this.leadZeroDateTime || withoutDays || day1monthInput || day2monthPaste || day1monthPaste || day2monthInput || day2monthInputDot) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          result += inputSymbol;\n          cursor++;\n        } else if (inputSymbol === ' ' && maskExpression[cursor] === ' ') {\n          result += inputSymbol;\n          cursor++;\n        } else if (this.specialCharacters.indexOf(maskExpression[cursor] ?? '') !== -1) {\n          result += maskExpression[cursor];\n          cursor++;\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n          i--;\n        } else if (maskExpression[cursor] === '9' && this.showMaskTyped) {\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n        } else if (this.specialCharacters.indexOf(inputSymbol) > -1 && this.patterns[maskExpression[cursor] ?? ''] && this.patterns[maskExpression[cursor] ?? '']?.optional) {\n          if (!!inputArray[cursor] && maskExpression !== '099.099.099.099' && maskExpression !== '000.000.000-00' && maskExpression !== '00.000.000/0000-00' && !maskExpression.match(/^9+\\.0+$/)) {\n            result += inputArray[cursor];\n          }\n          cursor++;\n          i--;\n        } else if (this.maskExpression[cursor + 1] === '*' && this._findSpecialChar(this.maskExpression[cursor + 2] ?? '') && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.maskExpression[cursor + 1] === '?' && this._findSpecialChar(this.maskExpression[cursor + 2] ?? '') && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.showMaskTyped && this.specialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter) {\n          stepBack = true;\n        }\n      }\n    }\n    if (result.length + 1 === maskExpression.length && this.specialCharacters.indexOf(maskExpression[maskExpression.length - 1] ?? '') !== -1) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n    let newPosition = position + 1;\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n    let actualShift = justPasted && !maskExpression.startsWith('separator') ? cursor : this._shift.has(position) ? shift : 0;\n    if (stepBack) {\n      actualShift--;\n    }\n    cb(actualShift, backspaceShift);\n    if (shift < 0) {\n      this._shift.clear();\n    }\n    let onlySpecial = false;\n    if (backspaced) {\n      onlySpecial = inputArray.every(char => this.specialCharacters.includes(char));\n    }\n    let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n    if (result.length === 0) {\n      res = `${this.prefix}${result}`;\n    }\n    return res;\n  }\n  _findSpecialChar(inputSymbol) {\n    return this.specialCharacters.find(val => val === inputSymbol);\n  }\n  _checkSymbolMask(inputSymbol, maskSymbol) {\n    this.patterns = this.customPattern ? this.customPattern : this.patterns;\n    return (this.patterns[maskSymbol]?.pattern && this.patterns[maskSymbol]?.pattern.test(inputSymbol)) ?? false;\n  }\n  _stripToDecimal(str) {\n    return str.split('').filter((i, idx) => {\n      const isDecimalMarker = typeof this.decimalMarker === 'string' ? i === this.decimalMarker :\n      // TODO (inepipenko) use utility type\n      this.decimalMarker.includes(i);\n      return i.match('^-?\\\\d') || i === this.thousandSeparator || isDecimalMarker || i === '-' && idx === 0 && this.allowNegativeNumbers;\n    }).join('');\n  }\n  _charToRegExpExpression(char) {\n    // if (Array.isArray(char)) {\n    // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n    // }\n    if (char) {\n      const charsToEscape = '[\\\\^$.|?*+()';\n      return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n    }\n    return char;\n  }\n  _shiftStep(maskExpression, cursor, inputLength) {\n    const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n    this._shift.add(shiftStep + this.prefix.length || 0);\n  }\n  _compareOrIncludes(value, comparedValue, excludedValue) {\n    return Array.isArray(comparedValue) ? comparedValue.filter(v => v !== excludedValue).includes(value) : value === comparedValue;\n  }\n  _validIP(valuesIP) {\n    return !(valuesIP.length === 4 && !valuesIP.some((value, index) => {\n      if (valuesIP.length !== index + 1) {\n        return value === '' || Number(value) > 255;\n      }\n      return value === '' || Number(value.substring(0, 3)) > 255;\n    }));\n  }\n}\nNgxMaskApplierService.ɵfac = function NgxMaskApplierService_Factory(t) {\n  return new (t || NgxMaskApplierService)();\n};\nNgxMaskApplierService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxMaskApplierService,\n  factory: NgxMaskApplierService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskApplierService, [{\n    type: Injectable\n  }], null, null);\n})();\nclass NgxMaskService extends NgxMaskApplierService {\n  constructor() {\n    super(...arguments);\n    this.isNumberValue = false;\n    this.maskIsShown = '';\n    this.selStart = null;\n    this.selEnd = null;\n    /**\n     * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n     * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n     */\n    this.writingValue = false;\n    this.maskChanged = false;\n    this.triggerOnMaskChange = false;\n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    this.onChange = _ => {};\n    this.document = inject(DOCUMENT);\n    this._config = inject(NGX_MASK_CONFIG);\n    this._elementRef = inject(ElementRef, {\n      optional: true\n    });\n    this._renderer = inject(Renderer2, {\n      optional: true\n    });\n  }\n  // eslint-disable-next-line complexity\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    if (!maskExpression) {\n      return inputValue !== this.actualValue ? this.actualValue : inputValue;\n    }\n    this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n    if (this.maskExpression === 'IP' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n    if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n    if (!inputValue && this.showMaskTyped) {\n      this.formControlResult(this.prefix);\n      return this.prefix + this.maskIsShown;\n    }\n    const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] ?? '' : '';\n    let newInputValue = '';\n    if (this.hiddenInput !== undefined && !this.writingValue) {\n      let actualResult = this.actualValue.split('');\n      // eslint-disable  @typescript-eslint/no-unused-expressions\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n      inputValue !== '' && actualResult.length ? typeof this.selStart === 'number' && typeof this.selEnd === 'number' ? inputValue.length > actualResult.length ? actualResult.splice(this.selStart, 0, getSymbol) : inputValue.length < actualResult.length ? actualResult.length - inputValue.length === 1 ? actualResult.splice(this.selStart - 1, 1) : actualResult.splice(this.selStart, this.selEnd - this.selStart) : null : null : actualResult = [];\n      if (this.showMaskTyped) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this.removeMask(inputValue);\n      }\n      // eslint-enable  @typescript-eslint/no-unused-expressions\n      newInputValue = this.actualValue.length && actualResult.length <= inputValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n    }\n    if (this.showMaskTyped) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.removeMask(inputValue);\n    }\n    newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n    const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n    this.actualValue = this.getActualValue(result);\n    // handle some separator implications:\n    // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n    if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n      this.decimalMarker = ',';\n    }\n    // b) remove decimal marker from list of special characters to mask\n    if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n      this.specialCharacters = this.specialCharacters.filter(item => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator) //item !== this.decimalMarker, // !\n      );\n    }\n    this.formControlResult(result);\n    if (!this.showMaskTyped) {\n      if (this.hiddenInput) {\n        return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n      }\n      return result;\n    }\n    const resLen = result.length;\n    const prefNmask = this.prefix + this.maskIsShown;\n    if (this.maskExpression.includes('H')) {\n      const countSkipedSymbol = this._numberSkipedSymbols(result);\n      return result + prefNmask.slice(resLen + countSkipedSymbol);\n    } else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n      return result + prefNmask;\n    }\n    return result + prefNmask.slice(resLen);\n  }\n  // get the number of characters that were shifted\n  _numberSkipedSymbols(value) {\n    const regex = /(^|\\D)(\\d\\D)/g;\n    let match = regex.exec(value);\n    let countSkipedSymbol = 0;\n    while (match != null) {\n      countSkipedSymbol += 1;\n      match = regex.exec(value);\n    }\n    return countSkipedSymbol;\n  }\n  applyValueChanges(position, justPasted, backspaced,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    const formElement = this._elementRef?.nativeElement;\n    if (!formElement) {\n      return;\n    }\n    formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n    if (formElement === this._getActiveElement()) {\n      return;\n    }\n    this.clearIfNotMatchFn();\n  }\n  hideInput(inputValue, maskExpression) {\n    return inputValue.split('').map((curr, index) => {\n      if (this.patterns && this.patterns[maskExpression[index] ?? ''] && this.patterns[maskExpression[index] ?? '']?.symbol) {\n        return this.patterns[maskExpression[index] ?? '']?.symbol;\n      }\n      return curr;\n    }).join('');\n  }\n  // this function is not necessary, it checks result against maskExpression\n  getActualValue(res) {\n    const compare = res.split('').filter((symbol, i) => {\n      const maskChar = this.maskExpression[i] ?? '';\n      return this._checkSymbolMask(symbol, maskChar) || this.specialCharacters.includes(maskChar) && symbol === maskChar;\n    });\n    if (compare.join('') === res) {\n      return compare.join('');\n    }\n    return res;\n  }\n  shiftTypedSymbols(inputValue) {\n    let symbolToReplace = '';\n    const newInputValue = inputValue && inputValue.split('').map((currSymbol, index) => {\n      if (this.specialCharacters.includes(inputValue[index + 1] ?? '') && inputValue[index + 1] !== this.maskExpression[index + 1]) {\n        symbolToReplace = currSymbol;\n        return inputValue[index + 1];\n      }\n      if (symbolToReplace.length) {\n        const replaceSymbol = symbolToReplace;\n        symbolToReplace = '';\n        return replaceSymbol;\n      }\n      return currSymbol;\n    }) || [];\n    return newInputValue.join('');\n  }\n  /**\n   * Convert number value to string\n   * 3.1415 -> '3.1415'\n   * 1e-7 -> '0.0000001'\n   */\n  numberToString(value) {\n    if (!value && value !== 0) {\n      return String(value);\n    }\n    return Number(value).toLocaleString('fullwide', {\n      useGrouping: false,\n      maximumFractionDigits: 20\n    });\n  }\n  showMaskInInput(inputVal) {\n    if (this.showMaskTyped && !!this.shownMaskExpression) {\n      if (this.maskExpression.length !== this.shownMaskExpression.length) {\n        throw new Error('Mask expression must match mask placeholder length');\n      } else {\n        return this.shownMaskExpression;\n      }\n    } else if (this.showMaskTyped) {\n      if (inputVal) {\n        if (this.maskExpression === 'IP') {\n          return this._checkForIp(inputVal);\n        }\n        if (this.maskExpression === 'CPF_CNPJ') {\n          return this._checkForCpfCnpj(inputVal);\n        }\n      }\n      return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n    }\n    return '';\n  }\n  clearIfNotMatchFn() {\n    const formElement = this._elementRef?.nativeElement;\n    if (!formElement) {\n      return;\n    }\n    if (this.clearIfNotMatch && this.prefix.length + this.maskExpression.length + this.suffix.length !== formElement.value.replace(/_/g, '').length) {\n      this.formElementProperty = ['value', ''];\n      this.applyMask(formElement.value, this.maskExpression);\n    }\n  }\n  set formElementProperty([name, value]) {\n    if (!this._renderer || !this._elementRef) {\n      return;\n    }\n    Promise.resolve().then(() => this._renderer?.setProperty(this._elementRef?.nativeElement, name, value));\n  }\n  checkSpecialCharAmount(mask) {\n    const chars = mask.split('').filter(item => this._findSpecialChar(item));\n    return chars.length;\n  }\n  removeMask(inputValue) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.specialCharacters.concat('_').concat(this.placeHolderCharacter));\n  }\n  _checkForIp(inputVal) {\n    if (inputVal === '#') {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    const arr = [];\n    for (let i = 0; i < inputVal.length; i++) {\n      const value = inputVal[i] ?? '';\n      if (!value) {\n        continue;\n      }\n      if (value.match('\\\\d')) {\n        arr.push(value);\n      }\n    }\n    if (arr.length <= 3) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    if (arr.length > 3 && arr.length <= 6) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    if (arr.length > 6 && arr.length <= 9) {\n      return this.placeHolderCharacter;\n    }\n    if (arr.length > 9 && arr.length <= 12) {\n      return '';\n    }\n    return '';\n  }\n  _checkForCpfCnpj(inputVal) {\n    const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    if (inputVal === '#') {\n      return cpf;\n    }\n    const arr = [];\n    for (let i = 0; i < inputVal.length; i++) {\n      const value = inputVal[i] ?? '';\n      if (!value) {\n        continue;\n      }\n      if (value.match('\\\\d')) {\n        arr.push(value);\n      }\n    }\n    if (arr.length <= 3) {\n      return cpf.slice(arr.length, cpf.length);\n    }\n    if (arr.length > 3 && arr.length <= 6) {\n      return cpf.slice(arr.length + 1, cpf.length);\n    }\n    if (arr.length > 6 && arr.length <= 9) {\n      return cpf.slice(arr.length + 2, cpf.length);\n    }\n    if (arr.length > 9 && arr.length < 11) {\n      return cpf.slice(arr.length + 3, cpf.length);\n    }\n    if (arr.length === 11) {\n      return '';\n    }\n    if (arr.length === 12) {\n      if (inputVal.length === 17) {\n        return cnpj.slice(16, cnpj.length);\n      }\n      return cnpj.slice(15, cnpj.length);\n    }\n    if (arr.length > 12 && arr.length <= 14) {\n      return cnpj.slice(arr.length + 4, cnpj.length);\n    }\n    return '';\n  }\n  /**\n   * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n   */\n  _getActiveElement(document = this.document) {\n    const shadowRootEl = document?.activeElement?.shadowRoot;\n    if (!shadowRootEl?.activeElement) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n  /**\n   * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n   * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n   * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n   * model value too. Therefore, we don't trigger onChange in this scenario.\n   * @param inputValue the current form input value\n   */\n  formControlResult(inputValue) {\n    if (this.writingValue || !this.triggerOnMaskChange && this.maskChanged) {\n      this.maskChanged = false;\n      return;\n    }\n    if (Array.isArray(this.dropSpecialCharacters)) {\n      this.onChange(this._toNumber(this._checkSymbols(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters))));\n    } else if (this.dropSpecialCharacters) {\n      this.onChange(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue)))));\n    } else {\n      this.onChange(this._toNumber(inputValue));\n    }\n  }\n  _toNumber(value) {\n    if (!this.isNumberValue || value === '') {\n      return value;\n    }\n    const num = Number(value);\n    return Number.isNaN(num) ? value : num;\n  }\n  _removeMask(value, specialCharactersForRemove) {\n    return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n  }\n  _removePrefix(value) {\n    if (!this.prefix) {\n      return value;\n    }\n    return value ? value.replace(this.prefix, '') : value;\n  }\n  _removeSuffix(value) {\n    if (!this.suffix) {\n      return value;\n    }\n    return value ? value.replace(this.suffix, '') : value;\n  }\n  _retrieveSeparatorValue(result) {\n    const specialCharacters = Array.isArray(this.dropSpecialCharacters) ? this.specialCharacters.filter(v => {\n      return this.dropSpecialCharacters.includes(v);\n    }) : this.specialCharacters;\n    return this._removeMask(result, specialCharacters);\n  }\n  _regExpForRemove(specialCharactersForRemove) {\n    return new RegExp(specialCharactersForRemove.map(item => `\\\\${item}`).join('|'), 'gi');\n  }\n  _replaceDecimalMarkerToDot(value) {\n    const markers = Array.isArray(this.decimalMarker) ? this.decimalMarker : [this.decimalMarker];\n    return value.replace(this._regExpForRemove(markers), '.');\n  }\n  _checkSymbols(result) {\n    if (result === '') {\n      return result;\n    }\n    const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n    const separatorValue = this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(result));\n    if (!this.isNumberValue) {\n      return separatorValue;\n    }\n    if (separatorPrecision) {\n      if (result === this.decimalMarker) {\n        return null;\n      }\n      return this._checkPrecision(this.maskExpression, separatorValue);\n    } else {\n      return separatorValue;\n    }\n  }\n  // TODO should think about helpers or separting decimal precision to own property\n  _retrieveSeparatorPrecision(maskExpretion) {\n    const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n    return matcher ? Number(matcher[1]) : null;\n  }\n  _checkPrecision(separatorExpression, separatorValue) {\n    if (separatorExpression.indexOf('2') > 0) {\n      return Number(separatorValue).toFixed(2);\n    }\n    return Number(separatorValue);\n  }\n}\nNgxMaskService.ɵfac = /* @__PURE__ */(() => {\n  let ɵNgxMaskService_BaseFactory;\n  return function NgxMaskService_Factory(t) {\n    return (ɵNgxMaskService_BaseFactory || (ɵNgxMaskService_BaseFactory = i0.ɵɵgetInheritedFactory(NgxMaskService)))(t || NgxMaskService);\n  };\n})();\nNgxMaskService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxMaskService,\n  factory: NgxMaskService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * @internal\n */\nfunction _configFactory() {\n  const initConfig = inject(INITIAL_CONFIG);\n  const configValue = inject(NEW_CONFIG);\n  return configValue instanceof Function ? {\n    ...initConfig,\n    ...configValue()\n  } : {\n    ...initConfig,\n    ...configValue\n  };\n}\nfunction provideNgxMask(configValue) {\n  return [{\n    provide: NEW_CONFIG,\n    useValue: configValue\n  }, {\n    provide: INITIAL_CONFIG,\n    useValue: initialConfig\n  }, {\n    provide: NGX_MASK_CONFIG,\n    useFactory: _configFactory\n  }, NgxMaskService];\n}\nfunction provideEnvironmentNgxMask(configValue) {\n  return makeEnvironmentProviders(provideNgxMask(configValue));\n}\nclass NgxMaskDirective {\n  constructor() {\n    // eslint-disable-next-line @angular-eslint/no-input-rename\n    this.maskExpression = '';\n    this.specialCharacters = [];\n    this.patterns = {};\n    this.prefix = '';\n    this.suffix = '';\n    this.thousandSeparator = ' ';\n    this.decimalMarker = '.';\n    this.dropSpecialCharacters = null;\n    this.hiddenInput = null;\n    this.showMaskTyped = null;\n    this.placeHolderCharacter = null;\n    this.shownMaskExpression = null;\n    this.showTemplate = null;\n    this.clearIfNotMatch = null;\n    this.validation = null;\n    this.separatorLimit = null;\n    this.allowNegativeNumbers = null;\n    this.leadZeroDateTime = null;\n    this.triggerOnMaskChange = null;\n    this.maskFilled = new EventEmitter();\n    this._maskValue = '';\n    this._position = null;\n    this._maskExpressionArray = [];\n    this._justPasted = false;\n    this.document = inject(DOCUMENT);\n    this._maskService = inject(NgxMaskService, {\n      self: true\n    });\n    this._config = inject(NGX_MASK_CONFIG);\n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    this.onChange = _ => {};\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    this.onTouch = () => {};\n  }\n  ngOnChanges(changes) {\n    const {\n      maskExpression,\n      specialCharacters,\n      patterns,\n      prefix,\n      suffix,\n      thousandSeparator,\n      decimalMarker,\n      dropSpecialCharacters,\n      hiddenInput,\n      showMaskTyped,\n      placeHolderCharacter,\n      shownMaskExpression,\n      showTemplate,\n      clearIfNotMatch,\n      validation,\n      separatorLimit,\n      allowNegativeNumbers,\n      leadZeroDateTime,\n      triggerOnMaskChange\n    } = changes;\n    if (maskExpression) {\n      if (maskExpression.currentValue !== maskExpression.previousValue && !maskExpression.firstChange) {\n        this._maskService.maskChanged = true;\n      }\n      if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n        this._maskExpressionArray = maskExpression.currentValue.split('||').sort((a, b) => {\n          return a.length - b.length;\n        });\n        this._setMask();\n      } else {\n        this._maskExpressionArray = [];\n        this._maskValue = maskExpression.currentValue || '';\n        this._maskService.maskExpression = this._maskValue;\n      }\n    }\n    if (specialCharacters) {\n      if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n        return;\n      } else {\n        this._maskService.specialCharacters = specialCharacters.currentValue || [];\n      }\n    }\n    // Only overwrite the mask available patterns if a pattern has actually been passed in\n    if (patterns && patterns.currentValue) {\n      this._maskService.patterns = patterns.currentValue;\n    }\n    if (prefix) {\n      this._maskService.prefix = prefix.currentValue;\n    }\n    if (suffix) {\n      this._maskService.suffix = suffix.currentValue;\n    }\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator.currentValue;\n    }\n    if (decimalMarker) {\n      this._maskService.decimalMarker = decimalMarker.currentValue;\n    }\n    if (dropSpecialCharacters) {\n      this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n    }\n    if (hiddenInput) {\n      this._maskService.hiddenInput = hiddenInput.currentValue;\n    }\n    if (showMaskTyped) {\n      this._maskService.showMaskTyped = showMaskTyped.currentValue;\n    }\n    if (placeHolderCharacter) {\n      this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n    }\n    if (shownMaskExpression) {\n      this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n    }\n    if (showTemplate) {\n      this._maskService.showTemplate = showTemplate.currentValue;\n    }\n    if (clearIfNotMatch) {\n      this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n    }\n    if (validation) {\n      this._maskService.validation = validation.currentValue;\n    }\n    if (separatorLimit) {\n      this._maskService.separatorLimit = separatorLimit.currentValue;\n    }\n    if (allowNegativeNumbers) {\n      this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n      if (this._maskService.allowNegativeNumbers) {\n        this._maskService.specialCharacters = this._maskService.specialCharacters.filter(c => c !== '-');\n      }\n    }\n    if (leadZeroDateTime) {\n      this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n    }\n    if (triggerOnMaskChange) {\n      this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n    }\n    this._applyMask();\n  }\n  // eslint-disable-next-line complexity\n  validate({\n    value\n  }) {\n    if (!this._maskService.validation || !this._maskValue) {\n      return null;\n    }\n    if (this._maskService.ipError) {\n      return this._createValidationError(value);\n    }\n    if (this._maskService.cpfCnpjError) {\n      return this._createValidationError(value);\n    }\n    if (this._maskValue.startsWith('separator')) {\n      return null;\n    }\n    if (withoutValidation.includes(this._maskValue)) {\n      return null;\n    }\n    if (this._maskService.clearIfNotMatch) {\n      return null;\n    }\n    if (timeMasks.includes(this._maskValue)) {\n      return this._validateTime(value);\n    }\n    if (value && value.toString().length >= 1) {\n      let counterOfOpt = 0;\n      for (const key in this._maskService.patterns) {\n        if (this._maskService.patterns[key]?.optional) {\n          if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n            const opt = this._maskValue.split('').filter(i => i === key).join('');\n            counterOfOpt += opt.length;\n          } else if (this._maskValue.indexOf(key) !== -1) {\n            counterOfOpt++;\n          }\n          if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n            return null;\n          }\n          if (counterOfOpt === this._maskValue.length) {\n            return null;\n          }\n        }\n      }\n      if (this._maskValue.indexOf('{') === 1 && value.toString().length === this._maskValue.length + Number((this._maskValue.split('{')[1] ?? '').split('}')[0]) - 4) {\n        return null;\n      }\n      if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n        return null;\n      } else if (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*') || this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?') || this._maskValue.indexOf('{') === 1) {\n        return this._createValidationError(value);\n      }\n      if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n        const length = this._maskService.dropSpecialCharacters ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt : this._maskValue.length - counterOfOpt;\n        if (value.toString().length < length) {\n          return this._createValidationError(value);\n        }\n      }\n    }\n    if (value) {\n      this.maskFilled.emit();\n      return null;\n    }\n    return null;\n  }\n  onPaste() {\n    this._justPasted = true;\n  }\n  onModelChange(value) {\n    // on form reset we need to update the actualValue\n    if ((value === '' || value === null || value === undefined) && this._maskService.actualValue) {\n      this._maskService.actualValue = this._maskService.getActualValue('');\n    }\n  }\n  onInput(e) {\n    const el = e.target;\n    this._inputValue = el.value;\n    this._setMask();\n    if (!this._maskValue) {\n      this.onChange(el.value);\n      return;\n    }\n    let position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n    let caretShift = 0;\n    let backspaceShift = false;\n    this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace' || this._code === 'Delete', (shift, _backspaceShift) => {\n      this._justPasted = false;\n      caretShift = shift;\n      backspaceShift = _backspaceShift;\n    });\n    // only set the selection if the element is active\n    if (this._getActiveElement() !== el) {\n      return;\n    }\n    // update position after applyValueChanges to prevent cursor on wrong position when it has an array of maskExpression\n    if (this._maskExpressionArray.length) {\n      position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n    }\n    this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n    let positionToApply = this._position ? this._inputValue.length + position + caretShift : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n    if (positionToApply > this._getActualInputLength()) {\n      positionToApply = this._getActualInputLength();\n    }\n    if (positionToApply < 0) {\n      positionToApply = 0;\n    }\n    el.setSelectionRange(positionToApply, positionToApply);\n    this._position = null;\n  }\n  onBlur() {\n    if (this._maskValue) {\n      this._maskService.clearIfNotMatchFn();\n    }\n    this.onTouch();\n  }\n  onClick(e) {\n    if (!this._maskValue) {\n      return;\n    }\n    const el = e.target;\n    const posStart = 0;\n    const posEnd = 0;\n    if (el !== null && el.selectionStart !== null && el.selectionStart === el.selectionEnd && el.selectionStart > this._maskService.prefix.length &&\n    // eslint-disable-next-line\n    e.keyCode !== 38) {\n      if (this._maskService.showMaskTyped) {\n        // We are showing the mask in the input\n        this._maskService.maskIsShown = this._maskService.showMaskInInput();\n        if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n          // the input ONLY contains the mask, so position the cursor at the start\n          el.focus();\n          el.setSelectionRange(posStart, posEnd);\n        } else {\n          // the input contains some characters already\n          if (el.selectionStart > this._maskService.actualValue.length) {\n            // if the user clicked beyond our value's length, position the cursor at the end of our value\n            el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n          }\n        }\n      }\n    }\n    const nextValue = el && (!el.value || el.value === this._maskService.prefix ? this._maskService.prefix + this._maskService.maskIsShown : el.value);\n    /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n    if (el && el.value !== nextValue) {\n      el.value = nextValue;\n    }\n    /** fix of cursor position with prefix when mouse click occur */\n    if (el && (el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n    /** select only inserted text */\n    if (el && el.selectionEnd > this._getActualInputLength()) {\n      el.selectionEnd = this._getActualInputLength();\n    }\n  }\n  // eslint-disable-next-line complexity\n  onKeyDown(e) {\n    if (!this._maskValue) {\n      return;\n    }\n    this._code = e.code ? e.code : e.key;\n    const el = e.target;\n    this._inputValue = el.value;\n    this._setMask();\n    if (e.keyCode === 38) {\n      e.preventDefault();\n    }\n    if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n      if (e.keyCode === 8 && el.value.length === 0) {\n        el.selectionStart = el.selectionEnd;\n      }\n      if (e.keyCode === 8 && el.selectionStart !== 0) {\n        // If specialChars is false, (shouldn't ever happen) then set to the defaults\n        this.specialCharacters = this.specialCharacters?.length ? this.specialCharacters : this._config.specialCharacters;\n        if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n          el.setSelectionRange(this.prefix.length, el.selectionEnd);\n        } else {\n          if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n            while (this.specialCharacters.includes((this._inputValue[el.selectionStart - 1] ?? '').toString()) && (this.prefix.length >= 1 && el.selectionStart > this.prefix.length || this.prefix.length === 0)) {\n              el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n            }\n          }\n        }\n      }\n      this.checkSelectionOnDeletion(el);\n      if (this._maskService.prefix.length && el.selectionStart <= this._maskService.prefix.length && el.selectionEnd <= this._maskService.prefix.length) {\n        e.preventDefault();\n      }\n      const cursorStart = el.selectionStart;\n      if (e.keyCode === 8 && !el.readOnly && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n        this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n      }\n    }\n    if (!!this.suffix && this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n      el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n    } else if (e.keyCode === 65 && e.ctrlKey || e.keyCode === 65 && e.metaKey // Cmd + A (Mac)\n    ) {\n      el.setSelectionRange(0, this._getActualInputLength());\n      e.preventDefault();\n    }\n    this._maskService.selStart = el.selectionStart;\n    this._maskService.selEnd = el.selectionEnd;\n  }\n  /** It writes the value in the input */\n  async writeValue(inputValue) {\n    if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n      if ('disable' in inputValue) {\n        this.setDisabledState(Boolean(inputValue.disable));\n      }\n      // eslint-disable-next-line no-param-reassign\n      inputValue = inputValue.value;\n    }\n    if (typeof inputValue === 'number' || this._maskValue.startsWith('separator')) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this._maskService.numberToString(inputValue);\n      if (!Array.isArray(this.decimalMarker)) {\n        const localeDecimalMarker = this._currentLocaleDecimalMarker();\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this.decimalMarker !== localeDecimalMarker ? inputValue.replace(localeDecimalMarker, this.decimalMarker) : inputValue;\n      }\n      this._maskService.isNumberValue = true;\n    }\n    if (typeof inputValue !== 'string') {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = '';\n    }\n    this._inputValue = inputValue;\n    this._setMask();\n    if (inputValue && this._maskService.maskExpression || this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped)) {\n      // Let the service we know we are writing value so that triggering onChange function won't happen during applyMask\n      this._maskService.writingValue = true;\n      this._maskService.formElementProperty = ['value', this._maskService.applyMask(inputValue, this._maskService.maskExpression)];\n      // Let the service know we've finished writing value\n      this._maskService.writingValue = false;\n    } else {\n      this._maskService.formElementProperty = ['value', inputValue];\n    }\n    this._inputValue = inputValue;\n  }\n  registerOnChange(fn) {\n    this._maskService.onChange = this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouch = fn;\n  }\n  _getActiveElement(document = this.document) {\n    const shadowRootEl = document?.activeElement?.shadowRoot;\n    if (!shadowRootEl?.activeElement) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n  checkSelectionOnDeletion(el) {\n    el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n    el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n  }\n  /** It disables the input element */\n  setDisabledState(isDisabled) {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  }\n  _repeatPatternSymbols(maskExp) {\n    return maskExp.match(/{[0-9]+}/) && maskExp.split('').reduce((accum, currVal, index) => {\n      this._start = currVal === '{' ? index : this._start;\n      if (currVal !== '}') {\n        return this._maskService._findSpecialChar(currVal) ? accum + currVal : accum;\n      }\n      this._end = index;\n      const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n      const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n      return accum + replaceWith;\n    }, '') || maskExp;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _applyMask() {\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n    this._maskService.formElementProperty = ['value', this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)];\n  }\n  _validateTime(value) {\n    const rowMaskLen = this._maskValue.split('').filter(s => s !== ':').length;\n    if (!value) {\n      return null; // Don't validate empty values to allow for optional form control\n    }\n    if (+(value[value.length - 1] ?? -1) === 0 && value.length < rowMaskLen || value.length <= rowMaskLen - 2) {\n      return this._createValidationError(value);\n    }\n    return null;\n  }\n  _getActualInputLength() {\n    return this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length;\n  }\n  _createValidationError(actualValue) {\n    return {\n      mask: {\n        requiredMask: this._maskValue,\n        actualValue\n      }\n    };\n  }\n  _setMask() {\n    if (this._maskExpressionArray.length > 0) {\n      this._maskExpressionArray.some(mask => {\n        const test = this._maskService.removeMask(this._inputValue)?.length <= this._maskService.removeMask(mask)?.length;\n        if (this._inputValue && test) {\n          this._maskValue = mask;\n          this.maskExpression = mask;\n          this._maskService.maskExpression = mask;\n          return test;\n        } else {\n          const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ?? '';\n          this._maskValue = this.maskExpression = this._maskService.maskExpression = expression;\n        }\n      });\n    }\n  }\n  _currentLocaleDecimalMarker() {\n    return 1.1.toLocaleString().substring(1, 2);\n  }\n}\nNgxMaskDirective.ɵfac = function NgxMaskDirective_Factory(t) {\n  return new (t || NgxMaskDirective)();\n};\nNgxMaskDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMaskDirective,\n  selectors: [[\"input\", \"mask\", \"\"], [\"textarea\", \"mask\", \"\"]],\n  hostBindings: function NgxMaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"paste\", function NgxMaskDirective_paste_HostBindingHandler() {\n        return ctx.onPaste();\n      })(\"ngModelChange\", function NgxMaskDirective_ngModelChange_HostBindingHandler($event) {\n        return ctx.onModelChange($event);\n      })(\"input\", function NgxMaskDirective_input_HostBindingHandler($event) {\n        return ctx.onInput($event);\n      })(\"blur\", function NgxMaskDirective_blur_HostBindingHandler() {\n        return ctx.onBlur();\n      })(\"click\", function NgxMaskDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown\", function NgxMaskDirective_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  },\n  inputs: {\n    maskExpression: [i0.ɵɵInputFlags.None, \"mask\", \"maskExpression\"],\n    specialCharacters: \"specialCharacters\",\n    patterns: \"patterns\",\n    prefix: \"prefix\",\n    suffix: \"suffix\",\n    thousandSeparator: \"thousandSeparator\",\n    decimalMarker: \"decimalMarker\",\n    dropSpecialCharacters: \"dropSpecialCharacters\",\n    hiddenInput: \"hiddenInput\",\n    showMaskTyped: \"showMaskTyped\",\n    placeHolderCharacter: \"placeHolderCharacter\",\n    shownMaskExpression: \"shownMaskExpression\",\n    showTemplate: \"showTemplate\",\n    clearIfNotMatch: \"clearIfNotMatch\",\n    validation: \"validation\",\n    separatorLimit: \"separatorLimit\",\n    allowNegativeNumbers: \"allowNegativeNumbers\",\n    leadZeroDateTime: \"leadZeroDateTime\",\n    triggerOnMaskChange: \"triggerOnMaskChange\"\n  },\n  outputs: {\n    maskFilled: \"maskFilled\"\n  },\n  exportAs: [\"mask\", \"ngxMask\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: NgxMaskDirective,\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useExisting: NgxMaskDirective,\n    multi: true\n  }, NgxMaskService]), i0.ɵɵNgOnChangesFeature]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'input[mask], textarea[mask]',\n      standalone: true,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: NgxMaskDirective,\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: NgxMaskDirective,\n        multi: true\n      }, NgxMaskService],\n      exportAs: 'mask,ngxMask'\n    }]\n  }], null, {\n    maskExpression: [{\n      type: Input,\n      args: ['mask']\n    }],\n    specialCharacters: [{\n      type: Input\n    }],\n    patterns: [{\n      type: Input\n    }],\n    prefix: [{\n      type: Input\n    }],\n    suffix: [{\n      type: Input\n    }],\n    thousandSeparator: [{\n      type: Input\n    }],\n    decimalMarker: [{\n      type: Input\n    }],\n    dropSpecialCharacters: [{\n      type: Input\n    }],\n    hiddenInput: [{\n      type: Input\n    }],\n    showMaskTyped: [{\n      type: Input\n    }],\n    placeHolderCharacter: [{\n      type: Input\n    }],\n    shownMaskExpression: [{\n      type: Input\n    }],\n    showTemplate: [{\n      type: Input\n    }],\n    clearIfNotMatch: [{\n      type: Input\n    }],\n    validation: [{\n      type: Input\n    }],\n    separatorLimit: [{\n      type: Input\n    }],\n    allowNegativeNumbers: [{\n      type: Input\n    }],\n    leadZeroDateTime: [{\n      type: Input\n    }],\n    triggerOnMaskChange: [{\n      type: Input\n    }],\n    maskFilled: [{\n      type: Output\n    }],\n    onPaste: [{\n      type: HostListener,\n      args: ['paste']\n    }],\n    onModelChange: [{\n      type: HostListener,\n      args: ['ngModelChange', ['$event']]\n    }],\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event']]\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\nclass NgxMaskPipe {\n  constructor() {\n    this.defaultOptions = {};\n    this._maskService = inject(NgxMaskService);\n  }\n  transform(value, mask, {\n    patterns,\n    ...config\n  } = {}) {\n    const currentConfig = {\n      maskExpression: mask,\n      ...this.defaultOptions,\n      ...config,\n      patterns: {\n        ...this._maskService.patterns,\n        ...patterns\n      }\n    };\n    Object.entries(currentConfig).forEach(([key, value]) => {\n      //eslint-disable-next-line  @typescript-eslint/no-explicit-any\n      this._maskService[key] = value;\n    });\n    return this._maskService.applyMask(`${value}`, mask);\n  }\n}\nNgxMaskPipe.ɵfac = function NgxMaskPipe_Factory(t) {\n  return new (t || NgxMaskPipe)();\n};\nNgxMaskPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"mask\",\n  type: NgxMaskPipe,\n  pure: true,\n  standalone: true\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'mask',\n      pure: true,\n      standalone: true\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, NEW_CONFIG, NGX_MASK_CONFIG, NgxMaskDirective, NgxMaskPipe, NgxMaskService, initialConfig, provideEnvironmentNgxMask, provideNgxMask, timeMasks, withoutValidation };\n"],
  "mappings": "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",
  "names": ["value"]
}
